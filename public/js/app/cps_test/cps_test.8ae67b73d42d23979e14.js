/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/cps_test/app.js":
/*!**************************************!*\
  !*** ./resources/js/cps_test/app.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _exam__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exam */ \"./resources/js/cps_test/exam.js\");\n\n\nlet pageContent = document.querySelector('#page-content');\nlet exam = new _exam__WEBPACK_IMPORTED_MODULE_0__[\"default\"](pageContent);\n\n\n//# sourceURL=webpack://cpsportal/./resources/js/cps_test/app.js?");

/***/ }),

/***/ "./resources/js/cps_test/dao.js":
/*!**************************************!*\
  !*** ./resources/js/cps_test/dao.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"addCSRF\": () => (/* binding */ addCSRF),\n/* harmony export */   \"config\": () => (/* binding */ config),\n/* harmony export */   \"downloadFile\": () => (/* binding */ downloadFile),\n/* harmony export */   \"httpRequest\": () => (/* binding */ httpRequest)\n/* harmony export */ });\nlet url = window.location\nlet splitUrl = url.toString().split('/');\nsplitUrl = splitUrl.slice(0, -1);\nlet UrlPathWithoutLastDirectory = splitUrl.join(\"/\")\n\nlet config = {\n    api: {\n        getElectroBezTable: '/api/electro_bez_table',\n        getSpsExamTable: '/api/sps_exam_table',\n        getSpsProtocol: '/api/export-sps-protocol',\n        postLogOut: '/logout',\n        loginURL: '/login',\n    }\n};\n\nObject.keys(config.api).forEach(key => {\n    config.api[key] = UrlPathWithoutLastDirectory + config.api[key];\n});\n\nfunction httpRequest(url, method, data = null, idRow = null) {\n    if (idRow !== null) url += '/' + idRow;\n\n    return new Promise(function (resolve, reject) {\n        let oReq = new XMLHttpRequest();\n        // oReq.responseType = 'json'; ie11 compatibility\n        oReq.open(method, url, true);\n        oReq.responseType = \"json\";\n        oReq.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        oReq.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n\n        oReq.onload = function () {\n            if (oReq.status >= 200 && oReq.status < 300) {\n                let res = JSON.stringify(oReq.response);\n                res = JSON.parse(res);\n                resolve(res);\n            } else {\n                reject({\n                    status: oReq.status,\n                    statusText: oReq.statusText\n                });\n            }\n        };\n        oReq.onerror = function () {\n            reject({\n                status: oReq.status,\n                statusText: oReq.statusText\n            });\n        };\n        oReq.send(JSON.stringify(data));\n    });\n}\n\nfunction downloadFile(url, method, data = null) {\n    let oReq = new XMLHttpRequest();\n    oReq.open(method, url, true);\n    oReq.responseType = \"blob\";\n    oReq.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    oReq.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n    oReq.onload = function (event) {\n        let blob = oReq.response;\n        let filename = '';\n        let disposition = oReq.getResponseHeader('Content-Disposition');\n        if (disposition && disposition.indexOf('attachment') !== -1) {\n            let filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n            let matches = filenameRegex.exec(disposition);\n            if (matches != null && matches[1]) {\n                filename = matches[1].replace(/['\"]/g, '');\n            }\n        }\n\n        let link = document.createElement('a');\n        link.href = window.URL.createObjectURL(blob);\n        link.download = decodeURI(filename);\n        link.click();\n        link.remove();\n        URL.revokeObjectURL(url);\n    };\n    oReq.onerror = function (event) {\n        console.log(event);\n    };\n\n    oReq.send(JSON.stringify(data));\n}\n\nfunction addCSRF(objectData) {\n    let CSRF = document.getElementsByName('csrf-token')[0].getAttribute('content');\n    if (CSRF !== undefined && CSRF !== \"\") {\n        objectData._token = CSRF;\n        return objectData;\n    }\n}\n\n\n\n\n//# sourceURL=webpack://cpsportal/./resources/js/cps_test/dao.js?");

/***/ }),

/***/ "./resources/js/cps_test/exam.js":
/*!***************************************!*\
  !*** ./resources/js/cps_test/exam.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Exam)\n/* harmony export */ });\n/* harmony import */ var _dao__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dao */ \"./resources/js/cps_test/dao.js\");\n/* harmony import */ var _ribbon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ribbon */ \"./resources/js/cps_test/ribbon.js\");\n\n\n\nclass Exam {\n    constructor(idPageContent) {\n        this.idPageContent = idPageContent;\n        this.initProperties();\n        this.assignHtml();\n        this.createExamTypeAndModeForm();\n    }\n\n    initProperties() {\n        // DOM elements\n        this.idPageContent;\n        this.ribbon;\n\n        // Exam state\n        this.examType = '';\n        this.examMode = '';\n        this.startTime = '';\n        this.currentQuestionInArray = 0;\n        this.rightAnswerNumber = 0;\n\n        // Exam configuration\n        this.examConfig = {\n            electroBez: {\n                totalQuestions: 20,\n                allowedMistakes: 2\n            },\n            sps: {\n                totalQuestions: 2,\n                allowedMistakes: 2\n            }\n        };\n\n        // Data structures\n        this.genericQuestionsStructure = [];\n        this.electroBezExamQuestionsStructure = {\n            questons: [],\n            themes: [],\n        };\n        this.spsExamQuestionsStructure = [];\n\n        // Worker data\n        this.worker = {\n            whatPassing: '',\n            surname: '',\n            name: '',\n            patronymic: '',\n            tabNumb: '',\n            passExam: false,\n            answers: [],\n            questions: [],\n        };\n    }\n\n    // ======================\n    // Initial Setup Methods\n    // ======================\n\n    createExamTypeAndModeForm() {\n        this.idPageContent.innerHTML = this.examTypeAndModeHtml;\n        document.querySelector('.btn-chose-exam_type_and_mode').onclick = () => this.handleExamTypeAndModeSelection();\n    }\n\n    handleExamTypeAndModeSelection() {\n        this.examMode = document.querySelector('#test_options_mode').value;\n        this.examType = document.querySelector('#test_options_type').value;\n\n        if (this.examType === 'electroBez') {\n            this.setupElectroBezExam();\n        } else if (this.examType === 'ops') {\n            this.setupSpsExam();\n        }\n    }\n\n    setupElectroBezExam() {\n        this.worker.whatPassing = 'electroBez';\n        this.setExamParameters('electroBez');\n\n        (0,_dao__WEBPACK_IMPORTED_MODULE_0__.httpRequest)(_dao__WEBPACK_IMPORTED_MODULE_0__.config.api.getElectroBezTable, 'GET')\n            .then(this.createElectroBezQuestionsStructure.bind(this))\n            .then(this.createElectroBezForm.bind(this))\n            .catch(console.error);\n    }\n\n    setupSpsExam() {\n        this.worker.whatPassing = 'ops';\n        this.setExamParameters('sps');\n\n        (0,_dao__WEBPACK_IMPORTED_MODULE_0__.httpRequest)(_dao__WEBPACK_IMPORTED_MODULE_0__.config.api.getSpsExamTable, 'GET')\n            .then(this.createSpsQuestionsStructure.bind(this))\n            .then(this.createExamSPSForm.bind(this))\n            .catch(console.error);\n    }\n\n    setExamParameters(examType) {\n        this.totalQuestions = this.examConfig[examType].totalQuestions;\n        this.allowedMistakes = this.examConfig[examType].allowedMistakes;\n    }\n\n    // ======================\n    // Form Creation Methods\n    // ======================\n\n    createExamSPSForm() {\n        if (this.examMode === 'exam') {\n            this.idPageContent.innerHTML = this.optionsSpsExamHtml;\n            document.querySelector('.btn-start-sps-test').onclick = () => {\n                if (this.setWorkerFIO()) {\n                    this.createExamQuestionAnswersForm();\n                }\n            };\n            return;\n        }\n        this.createExamQuestionAnswersForm();\n    }\n\n    createElectroBezForm() {\n        this.idPageContent.innerHTML = this.optionsElectroBezHtml;\n\n        // Small delay to ensure DOM is ready\n        setTimeout(() => {\n            this.populateThemesDropdown();\n\n            if (this.examMode === 'exam') {\n                this.toggleExamFieldsVisibility();\n            }\n\n            document.querySelector('.btn-start-test').onclick = () =>\n                this.handleElectroBezStartTest();\n        }, 0);\n    }\n\n    populateThemesDropdown() {\n\n        const themesSelect = document.querySelector('#test-themes');\n        if (!themesSelect) {\n            console.error('Could not find themes dropdown element');\n            return;\n        }\n\n        // Clear existing options except the default\n        themesSelect.innerHTML = '<option value=\"0\" selected>Все темы</option>';\n\n        // Add theme options\n        this.electroBezExamQuestionsStructure.themes.forEach((theme, index) => {\n            const option = new Option(theme, index + 1);\n            themesSelect.add(option);\n        });\n    }\n\n    toggleExamFieldsVisibility() {\n        document.querySelector('.test-themes').hidden = true;\n        document.querySelectorAll('.exam-field').forEach(element => {\n            element.hidden = false;\n        });\n    }\n\n    handleElectroBezStartTest() {\n        if (this.examMode === 'exam') {\n            if (!this.setWorkerFIO()) return;\n        }\n\n        const examSelectedOptions = {\n            group: document.querySelector('#test-options_electrical-group').value,\n            mode: this.examMode,\n            voltage: document.querySelector('#test-options_electrical-voltage').value,\n            theme: parseInt(document.querySelector('#test-themes').value),\n        };\n\n        this.filterQuestions(examSelectedOptions);\n        this.createExamQuestionAnswersForm();\n    }\n\n    createExamQuestionAnswersForm() {\n        this.startTime = this.getCurrentTime();\n        this.setFormWide();\n        this.createExamPageStructure(this.genericQuestionsStructure.length);\n\n        document.querySelector('.btn-submit-answer').addEventListener(\"click\", this.checkAnswer.bind(this));\n        this.displayCurrentQuestion();\n    }\n\n    // ======================\n    // Question Handling Methods\n    // ======================\n\n    displayCurrentQuestion() {\n        this.createQuestionAndAnswers(this.currentQuestionInArray);\n        this.ribbon.setBabbleStyleActive(this.currentQuestionInArray);\n    }\n\n    createQuestionAndAnswers(questionNumberInArray) {\n        const currentQuestion = this.genericQuestionsStructure[questionNumberInArray];\n\n        // Set question text\n        const questionDiv = document.querySelector('.question');\n        questionDiv.textContent = currentQuestion.questionText + ' ' + (currentQuestion.bookLink || '');\n\n        // Set question image\n        this.setQuestionImage(currentQuestion);\n\n        // Set answers\n        const answersDiv = document.querySelector('.answers');\n        answersDiv.innerHTML = '';\n\n        currentQuestion.answers.forEach((answer, i) => {\n            answersDiv.innerHTML += this.createHtmlAnswer(i, answer.text);\n            if (answer.correct) {\n                this.rightAnswerNumber = i;\n            }\n        });\n    }\n\n    setQuestionImage(question) {\n        const image = document.querySelector('#image_question');\n        if (question.pictName) {\n            let url = window.location\n            let splitUrl = url.toString().split('/');\n            splitUrl = splitUrl.slice(0, -1);\n            let UrlPathWithoutLastDirectory = splitUrl.join(\"/\")\n            image.src = UrlPathWithoutLastDirectory + '/pict/sps_test/' + question.pictName;\n            image.hidden = false;\n        } else {\n            image.hidden = true;\n        }\n    }\n\n    checkAnswer() {\n        const selectedAnswer = this.getSelectedAnswer();\n        if (selectedAnswer === undefined) return;\n\n        if (selectedAnswer === this.rightAnswerNumber) {\n            this.rightAnswerAction(selectedAnswer);\n        } else {\n            this.wrongAnswerAction(selectedAnswer);\n        }\n    }\n\n    getSelectedAnswer() {\n        const answersRadioButtons = document.querySelectorAll(\".form-check-input\");\n        for (let i = 0; i < answersRadioButtons.length; i++) {\n            if (answersRadioButtons[i].checked) {\n                return parseInt(answersRadioButtons[i].dataset.ans_numb);\n            }\n        }\n        return undefined;\n    }\n\n    rightAnswerAction(selectedAnswerNumber) {\n        if (this.examMode === 'preparation') {\n            this.handlePreparationModeAnswer(true, selectedAnswerNumber);\n            this.moveToNextQuestion();\n            return;\n        }\n        this.handleExamAnswer(true, selectedAnswerNumber);\n    }\n\n    wrongAnswerAction(selectedAnswerNumber) {\n        if (this.examMode === 'preparation') {\n            this.handlePreparationModeAnswer(false, selectedAnswerNumber);\n            return;\n        }\n        this.handleExamAnswer(false, selectedAnswerNumber);\n    }\n\n    handlePreparationModeAnswer(isCorrect, selectedAnswerNumber) {\n        if (!isCorrect) {\n            this.highlightCorrectAndWrongAnswers(selectedAnswerNumber);\n        }\n        this.ribbon.setBubbleBackgroundColor(isCorrect, this.currentQuestionInArray);\n    }\n\n    highlightCorrectAndWrongAnswers(selectedAnswerNumber) {\n        const rightAnswerDiv = document.querySelector('.text_answer_' + this.rightAnswerNumber);\n        rightAnswerDiv.style.backgroundColor = '#8bffd6';\n\n        if (selectedAnswerNumber !== undefined) {\n            const userAnswerDiv = document.querySelector('.text_answer_' + selectedAnswerNumber);\n            userAnswerDiv.style.backgroundColor = '#fec6c6';\n        }\n    }\n\n    handleExamAnswer(isCorrect, selectedAnswerNumber) {\n        if (this.isQuestionAnswered(this.currentQuestionInArray)) return;\n\n        this.setWorkerAnswer(isCorrect, selectedAnswerNumber);\n\n        if (this.getTotalAnsweredQuestions() === this.totalQuestions) {\n            this.reportResult();\n            return;\n        }\n\n        this.currentQuestionInArray = this.getNextNotAnsweredIndex();\n        this.ribbon.moveScrollIfCurrentBubbleIsLast(this.currentQuestionInArray);\n        this.displayCurrentQuestion();\n    }\n\n    moveToNextQuestion() {\n        if (this.genericQuestionsStructure.length > this.currentQuestionInArray + 1) {\n            this.currentQuestionInArray++;\n            this.ribbon.moveScrollIfCurrentBubbleIsLast(this.currentQuestionInArray);\n            this.displayCurrentQuestion();\n        }\n    }\n\n    // ======================\n    // Worker Data Methods\n    // ======================\n\n    setWorkerFIO() {\n        const surname = document.querySelector('#worker-surname');\n        const name = document.querySelector('#worker-name');\n        const patronymic = document.querySelector('#worker-patronymic');\n\n        if (!surname.value.trim() || !name.value.trim() || !patronymic.value.trim()) {\n            alert('Пожалуйста, заполните все обязательные поля');\n            return false;\n        }\n        this.worker.surname = surname.value;\n        this.worker.name = name.value;\n        this.worker.patronymic = patronymic.value;\n        this.worker.tabNumb = document.querySelector('#worker-numb').value;\n        return true;\n    }\n\n    setWorkerAnswer(isRight, selectedAnswerNumber) {\n        const currentQuestion = this.worker.questions[this.currentQuestionInArray];\n        currentQuestion.isRight = isRight;\n        currentQuestion.isAnswered = true;\n        currentQuestion.answerNumber = selectedAnswerNumber;\n        this.ribbon.setBabbleStyleBlocked(this.currentQuestionInArray);\n    }\n\n    // ======================\n    // Question Navigation Methods\n    // ======================\n\n    isQuestionAnswered(index) {\n        return this.worker.questions[index].isAnswered === true;\n    }\n\n    getTotalAnsweredQuestions() {\n        return this.worker.questions.filter(q => q.isAnswered).length;\n    }\n\n    getNextNotAnsweredIndex() {\n        // Check questions after current\n        for (let i = this.currentQuestionInArray + 1; i < this.totalQuestions; i++) {\n            if (!this.isQuestionAnswered(i)) return i;\n        }\n\n        // Check questions before current\n        for (let i = 0; i < this.currentQuestionInArray; i++) {\n            if (!this.isQuestionAnswered(i)) return i;\n        }\n\n        return null;\n    }\n\n    // ======================\n    // Exam Result Methods\n    // ======================\n\n    reportResult() {\n        const requestBody = this.createReportRequestBody();\n\n        if (this.isExamPass()) {\n            alert(\"Экзамен сдан\");\n        } else {\n            alert(\"Экзамен не сдан\");\n        }\n\n        (0,_dao__WEBPACK_IMPORTED_MODULE_0__.downloadFile)(_dao__WEBPACK_IMPORTED_MODULE_0__.config.api.getSpsProtocol, \"POST\", (0,_dao__WEBPACK_IMPORTED_MODULE_0__.addCSRF)(requestBody));\n    }\n\n    createReportRequestBody() {\n        return {\n            surname: this.worker.surname,\n            name: this.worker.name,\n            patronymic: this.worker.patronymic,\n            tab_numb: this.worker.tabNumb,\n            questions: this.getAnsweredQuestionsData(),\n            is_pass: this.worker.passExam,\n            start_time: this.startTime,\n            finish_time: this.getCurrentTime(),\n            report_theme: this.worker.whatPassing,\n        };\n    }\n\n    getAnsweredQuestionsData() {\n        return this.worker.questions.map(question => ({\n            question: question.questionText,\n            answer: question.answers[question.answerNumber].text,\n            isRight: question.isRight\n        }));\n    }\n\n    isExamPass() {\n        const totalRightAnswers = this.worker.questions.filter(q => q.isRight).length;\n        this.worker.passExam = (this.totalQuestions - totalRightAnswers) <= this.allowedMistakes;\n        return this.worker.passExam;\n    }\n\n    // ======================\n    // Utility Methods\n    // ======================\n\n    getCurrentTime() {\n        const now = new Date();\n        return `${now.getDate()}.${now.getMonth() + 1}.${now.getFullYear()} ${now.getHours()}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;\n    }\n\n    setFormWide() {\n        document.querySelector('.form-container').style.maxWidth = '95%';\n    }\n\n    filterQuestions(examSelectedOptions) {\n        let groupFieldToFilter = this.getGroupField(examSelectedOptions.group);\n\n        this.genericQuestionsStructure = this.electroBezExamQuestionsStructure.questons.filter(question => {\n            const matchesGroup = question[groupFieldToFilter] === true;\n            const matchesVoltage = question[examSelectedOptions.voltage] === true;\n\n            if (examSelectedOptions.theme === 0) {\n                return matchesGroup && matchesVoltage;\n            }\n            return matchesGroup && matchesVoltage && question.theme === examSelectedOptions.theme;\n        });\n\n        if (this.examMode === 'exam') {\n            this.genericQuestionsStructure = this.getRandomElements(this.genericQuestionsStructure, this.totalQuestions);\n        }\n\n        this.worker.questions = this.genericQuestionsStructure;\n    }\n\n    getGroupField(group) {\n        const groupFields = {\n            '2': 'secondGroup',\n            '3': 'thirdGroup',\n            '4': 'fourthGroup',\n            '5': 'fifthGroup'\n        };\n        return groupFields[group];\n    }\n\n    getRandomElements(arr, count) {\n        // Fisher-Yates shuffle algorithm\n        for (let i = arr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [arr[i], arr[j]] = [arr[j], arr[i]];\n        }\n        return arr.slice(0, count);\n    }\n\n    createExamPageStructure(questionsLength) {\n        this.idPageContent.innerHTML = this.examHtml;\n        this.ribbon = new _ribbon__WEBPACK_IMPORTED_MODULE_1__[\"default\"](document.querySelector('.questions-ribbon'), questionsLength - 1, this);\n    }\n\n    createHtmlAnswer(answerNumber, answerText) {\n        return `\n            <div class=\"form-check d-flex\">\n                <div class=\"radio-button-wrapper d-flex justify-content-md-center align-items-center\">\n                    <input class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\"\n                           data-ans_numb=\"${answerNumber}\" id=\"answer_${answerNumber}\">\n                </div>\n                <div class=\"quest-text\">\n                    <label class=\"form-check-answer text_answer_${answerNumber}\" for=\"answer_${answerNumber}\">\n                        ${answerText}\n                    </label>\n                </div>\n            </div>\n            <div class=\"vertical-space\"></div>\n        `;\n    }\n\n    // ======================\n    // Data Structure Creation Methods\n    // ======================\n\n    createSpsQuestionsStructure(examResponse) {\n        this.spsExamQuestionsStructure = examResponse.map(this.createSpsQuestion.bind(this));\n        this.genericQuestionsStructure = this.spsExamQuestionsStructure;\n\n        if (this.examMode === 'exam') {\n            this.prepareSpsExamQuestions();\n        }\n    }\n\n    createSpsQuestion(elem) {\n        const question = {\n            bookLink: null,\n            questionText: elem.question,\n            pictName: elem.pict_path,\n            answers: this.createSpsAnswers(elem),\n            isMedicine: elem.is_medicine === true,\n            isAnswered: false,\n            isRight: false,\n            answerNumber: 0,\n        };\n\n        this.setCorrectAnswer(question.answers, elem.correct_answer);\n        return question;\n    }\n\n    createSpsAnswers(elem) {\n        const answers = [];\n        for (let i = 1; i <= 5; i++) {\n            const answerField = 'answer_' + i;\n            if (elem[answerField]) {\n                answers.push({text: elem[answerField], correct: undefined});\n            }\n        }\n        return answers;\n    }\n\n    setCorrectAnswer(answers, correctAnswer) {\n        if (correctAnswer === null) throw new Error('correct_answer === null');\n        answers[parseInt(correctAnswer) - 1].correct = true;\n    }\n\n    prepareSpsExamQuestions() {\n        let questions = [...this.spsExamQuestionsStructure];\n\n        // Get medicine questions\n        const medicineQuestions = questions.filter(q => q.isMedicine);\n        const selectedMedicineQuestion = this.getRandomElement(medicineQuestions);\n        questions = questions.filter(q => !q.isMedicine);\n\n        // Get picture questions\n        const pictureQuestions = questions.filter(q => q.pictName);\n        const selectedPictureQuestion = this.getRandomElement(pictureQuestions);\n        questions = questions.filter(q => !q.pictName);\n\n        // Get remaining questions\n        const remainingQuestions = this.getRandomElements(questions, this.totalQuestions - 2);\n\n        this.genericQuestionsStructure = [...remainingQuestions, selectedPictureQuestion, selectedMedicineQuestion];\n        this.worker.questions = this.genericQuestionsStructure;\n    }\n\n    getRandomElement(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n    }\n\n    createElectroBezQuestionsStructure(examResponse) {\n        examResponse.forEach(elem => {\n            if (elem.question_theme_correct === 'Theme') {\n                this.electroBezExamQuestionsStructure.themes.push(elem.theme_question_answer);\n            } else if (elem.question_theme_correct === 'Question') {\n                this.addElectroBezQuestion(elem);\n            } else {\n                this.addElectroBezAnswer(elem);\n            }\n        });\n    }\n\n    addElectroBezQuestion(elem) {\n        const question = {\n            theme: elem.theme,\n            till1000: elem.till_1000,\n            tillAbove1000: elem.till_above_1000,\n            secondGroup: elem.second_group,\n            thirdGroup: elem.third_group,\n            fourthGroup: elem.fourth_group,\n            fifthGroup: elem.fifth_group,\n            commissionMember: elem.commission_member,\n            employee: elem.employee,\n            bookLink: elem.book_link,\n            questionText: elem.theme_question_answer,\n            answers: [],\n            pictName: '',\n        };\n        this.electroBezExamQuestionsStructure.questons.push(question);\n    }\n\n    addElectroBezAnswer(elem) {\n        const lastQuestion = this.electroBezExamQuestionsStructure.questons.slice(-1)[0];\n        if (!lastQuestion) return;\n\n        const answer = {\n            text: elem.theme_question_answer,\n            correct: elem.question_theme_correct === 'True',\n        };\n        lastQuestion.answers.push(answer);\n    }\n\n    // ======================\n    // HTML Templates\n    // ======================\n\n    assignHtml() {\n        this.examTypeAndModeHtml = this.getExamTypeAndModeHtml();\n        this.optionsSpsExamHtml = this.getOptionsSpsExamHtml();\n        this.optionsElectroBezHtml = this.getOptionsElectroBezHtml();\n        this.examHtml = this.getExamHtml();\n    }\n\n    getExamTypeAndModeHtml() {\n        return `\n            <div class=\"row mb-3\">\n                <label for=\"test-options_type\" class=\"col-sm-2 col-form-label\">Тема</label>\n                <div class=\"col-sm-10\">\n                    <select class=\"form-control\" id=\"test_options_type\">\n                        <option selected value=\"electroBez\">Электробезопасность</option>\n                        <option value=\"ops\">Нормы ОПС</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row mb-3\">\n                <label for=\"test-options_mode\" class=\"col-sm-2 col-form-label\">Режим</label>\n                <div class=\"col-sm-10\">\n                    <select class=\"form-control\" id=\"test_options_mode\">\n                        <option selected value=\"preparation\">Подготовка</option>\n                        <option value=\"exam\">Экзамен</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"d-flex flex-row-reverse bd-highlight\">\n                <button type=\"submit\" class=\"btn btn-primary btn-chose-exam_type_and_mode\">Далее</button>\n            </div>\n        `;\n    }\n\n    getOptionsSpsExamHtml() {\n        return `\n            <div class=\"row mb-3\">\n                <label for=\"worker-surname\" class=\"col-sm-2 col-form-label\">Фамилия</label>\n                <div class=\"col-sm-10\">\n                    <input type=\"text\" required id=\"worker-surname\" class=\"form-control\" name=\"worker-surname\">\n                </div>\n            </div>\n            <div class=\"row mb-3\">\n                <label for=\"worker-name\" class=\"col-sm-2 col-form-label\">Имя</label>\n                <div class=\"col-sm-10\">\n                    <input type=\"text\" required id=\"worker-name\" class=\"form-control\" name=\"worker-name\">\n                </div>\n            </div>\n            <div class=\"row mb-3\">\n                <label for=\"worker-patronymic\" class=\"col-sm-2 col-form-label\">Отчество</label>\n                <div class=\"col-sm-10\">\n                    <input type=\"text\" required id=\"worker-patronymic\" class=\"form-control\" name=\"worker-patronymic\">\n                </div>\n            </div>\n            <div class=\"row mb-3\">\n                <label for=\"worker-numb\" hidden  class=\"col-sm-2 col-form-label\">Табельный номер</label>\n                <div class=\"col-sm-10\">\n                    <input type=\"text\" hidden required id=\"worker-numb\" class=\"form-control\" name=\"worker-numb\">\n                </div>\n            </div>\n            <div class=\"d-flex flex-row-reverse bd-highlight\">\n                <button type=\"submit\" class=\"btn btn-primary btn-start-sps-test\">Далее</button>\n            </div>\n        `;\n    }\n\n    getOptionsElectroBezHtml() {\n        return `\n                    <div hidden class=\"row mb-3 exam-field\"\">\n                        <label for=\"worker-surname\"  class=\"col-sm-2 col-form-label \">Фамилия</label>\n                        <div class=\"col-sm-10\">\n                            <input type=\"text\" required id=\"worker-surname\" class=\"form-control \" name=\"worker-surname\">\n                        </div>\n                    </div>\n                    <div hidden class=\"row mb-3 exam-field\"\">\n                        <label for=\"worker-name\"  class=\"col-sm-2 col-form-label \">Имя</label>\n                        <div class=\"col-sm-10\">\n                             <input type=\"text\" required id=\"worker-name\" class=\"form-control \" name=\"worker-name\">\n                        </div>\n                    </div>\n                    <div hidden class=\"row mb-3 exam-field\"\">\n                        <label for=\"worker-patronymic\"  class=\"col-sm-2 col-form-label \" >Отчество</label>\n                        <div class=\"col-sm-10\">\n                             <input type=\"text\" required id=\"worker-patronymic\" class=\"form-control \" name=\"worker-patronymic\">\n                        </div>\n                    </div>\n                     <div hidden class=\"row mb-3\">\n                        <label for=\"worker-numb\"   class=\"col-sm-2 col-form-label\">Табельный номер</label>\n                        <div class=\"col-sm-10\">\n                             <input type=\"text\"  id=\"worker-numb\" class=\"form-control\" name=\"worker-numb\">\n                        </div>\n                    </div>\n                    <div hidden class=\"row mb-3 exam-field\"\" >\n                        <label for=\"worker-position\"  class=\"col-sm-2 col-form-label \">Должность</label>\n                        <div class=\"col-sm-10\">\n                            <select class=\"form-control \"  id=\"worker-position\" name = \"worker-position\">\n                                <option value=\"Ведущий инженер\" selected>Ведущий инженер</option>\n                                <option value=\"Зам. начальника цеха ПС\" selected>Зам. начальника цеха ПС</option>\n                                <option value=\"Мастер по КАиТ\" selected>Мастер по КАиТ</option>\n                                <option value=\"Кладовщик 2 разряда\" selected>Кладовщик 2 разряда</option>\n                                <option value=\"Техник II категории\" selected>Техник II категории</option>\n                                <option value=\"Инженер I категории\" selected>Инженер I категории</option>\n                                <option value=\"Инженер-электроник\" selected>Инженер-электроник</option>\n                                <option value=\"Инженер-электроник I категории\" selected>Инженер-электроник I категории</option>\n                                <option value=\"Инженер-электроник II категории\" selected>Инженер-электроник II категории</option>\n                                <option value=\"Ведущий инженер-электроник\" selected>Ведущий инженер-электроник</option>\n                                <option value=\"Наладчик КИПиА IV разряда\" selected>Наладчик КИПиА IV разряда</option>\n                                <option value=\"Наладчик КИПиА V разряда\" selected>Наладчик КИПиА V разряда</option>\n                                <option value=\"Наладчик КИПиА VI разряда\" selected>Наладчик КИПиА VI разряда</option>\n                                <option value=\"Начальник участка\" selected>Начальник участка</option>\n                                <option value=\"Начальник участка ПС\" selected>Начальник участка ПС</option>\n                                <option value=\"Начальник цеха ПС\" selected>Начальник цеха ПС</option>\n                                <option value=\"Слесарь по КИПиА IV разряда\" selected>Слесарь по КИПиА IV разряда</option>\n                                <option value=\"Слесарь по КИПиА V разряда\" selected>Слесарь по КИПиА V разряда</option>\n                                <option value=\"Слесарь по КИПиА VI разряда\" selected>Слесарь по КИПиА VI разряда</option>\n                                <option value=\"Электромонтер ОПС IV разряда\" selected>Электромонтер ОПС IV разряда</option>\n                                <option value=\"Электромонтер ОПС V разряда\" selected>Электромонтер ОПС V разряда</option>\n                                <option value=\"Электромонтер ОПС VI разряда\" selected>Электромонтер ОПС VI разряда</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <label for=\"test-options_electrical-voltage\" class=\"col-sm-2 col-form-label\">Напряжение</label>\n                        <div class=\"col-sm-10\">\n                            <select class=\"form-control\" id=\"test-options_electrical-voltage\">\n                                <option value=\"till1000\" selected>до 1000В</option>\n                                <option value=\"tillAbove1000\">до и выше 1000В</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <label for=\"test-options_electrical-group\" class=\"col-sm-2 col-form-label\">Группа</label>\n                        <div class=\"col-sm-10\">\n                            <select class=\"form-control\" id=\"test-options_electrical-group\">\n                                <option value=\"2\">2</option>\n                                <option value=\"3\" selected>3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"4\">5</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"row mb-3 test-themes\">\n                        <label for=\"test-themes\" class=\"col-sm-2 col-form-label \">Темы</label>\n                        <div class=\"col-sm-10\">\n                            <select class=\"form-control\" id=\"test-themes\">\n                                <option value=\"0\" selected>Все темы</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"d-flex flex-row-reverse bd-highlight\">\n                        <button type=\"submit\" class=\"btn btn-primary btn-start-test\">Далее</button>\n                    </div>\n        `;\n\n    }\n\n    getExamHtml() {\n        return `\n            <div class=\"questions-ribbon d-flex flex-row\"></div>\n            <div class=\"question text-center\"></div>\n            <div class=\"question image_question_wrapper\" style=\"display: flex;justify-content: center;\">\n                <img src=\"\" alt=\"question image\" id=\"image_question\" width=\"400\" height=\"400\">\n            </div>\n            <div class=\"answers\"></div>\n            <div class=\"d-grid gap-2 col-3 mx-auto\">\n                <button type=\"submit\" class=\"btn btn-primary btn-submit-answer\">Ответить</button>\n            </div>\n        `;\n    }\n}\n\n\n//# sourceURL=webpack://cpsportal/./resources/js/cps_test/exam.js?");

/***/ }),

/***/ "./resources/js/cps_test/ribbon.js":
/*!*****************************************!*\
  !*** ./resources/js/cps_test/ribbon.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ribbon)\n/* harmony export */ });\nclass Ribbon {\n    ActiveBubble = 0\n    ribbonDiv;\n    questionsStatus = [];\n    exam;\n    babbleWidth;\n    inScreenBubbles;\n    moveAmount;\n    bubbleListener;\n    constructor(ribbonDiv, bubblesQuantity, exam) {\n        this.ribbonDiv = ribbonDiv;\n        this.bubblesQuantity = bubblesQuantity;\n        this.exam = exam;\n        this.fillRibbonWithBubbles(bubblesQuantity);\n        this.calculateBubbleWidth();\n        this.calculateMoveScrollStep();\n\n    }\n\n    fillRibbonWithBubbles(bubblesQuantity) {\n        for (let i = 0; i <= bubblesQuantity; i++) {\n            const questionStatusElement = document.createElement(\"div\");\n            questionStatusElement.classList.add('quest-status', 'text-center', 'bubble-' + i);\n            questionStatusElement.textContent = (i + 1).toString();\n            this.ribbonDiv.appendChild(questionStatusElement);\n            let questionStatus = {\n                questionStatusElement: undefined,\n                userResult: undefined\n            }\n            questionStatus.questionStatusElement = questionStatusElement;\n            this.questionsStatus.push(questionStatus);\n            this.bubbleListener = this.bubbleClickAction.bind(this,i)\n            questionStatusElement.addEventListener(\"click\", this.bubbleListener\n            );\n        }\n    }\n\n    bubbleClickAction(i) {\n        this.setBabbleStyleNotActive(this.exam.currentQuestionInArray);\n        this.exam.currentQuestionInArray = i;\n        this.setBabbleStyleActive(this.exam.currentQuestionInArray);\n        this.exam.createQuestionAndAnswers(i);\n    }\n\n\n    calculateBubbleWidth() {\n        const bubble0 = document.querySelector('.bubble-0');\n        const style = getComputedStyle(bubble0);\n        const bubble0LeftMargin = style.marginLeft;\n        this.babbleWidth = bubble0.offsetWidth + parseInt(bubble0LeftMargin);\n        this.inScreenBubbles = Math.floor(this.ribbonDiv.clientWidth / this.babbleWidth);\n    }\n\n    setBubbleBackgroundColor(isRight, currentQuestionInArray) {\n        let bubble = this.questionsStatus[currentQuestionInArray];\n        if (bubble.userResult === undefined && isRight) {\n            bubble.questionStatusElement.style.backgroundColor = '#8bffd6';\n            bubble.userResult = 'right';\n        }\n        if (bubble.userResult === undefined && !isRight) {\n            bubble.questionStatusElement.style.backgroundColor = '#fec6c6';\n            bubble.userResult = 'wrong';\n        }\n    }\n\n    calculateMoveScrollStep() {\n        this.moveAmount = Math.floor(this.ribbonDiv.clientWidth / 2.5);\n    }\n\n    getLastBubbleInVision() {\n        if (this.ribbonDiv.scrollLeft !== 0) {\n            let bubblesNotInVisionOnLeftSide = Math.floor(parseInt(this.ribbonDiv.scrollLeft) / parseInt(this.babbleWidth));\n            return bubblesNotInVisionOnLeftSide + this.inScreenBubbles;\n        }\n        return this.inScreenBubbles;\n    }\n\n    getFirstBubbleInVision() {\n        if (this.ribbonDiv.scrollLeft === 0) {\n            return 1;\n        }\n        return Math.floor(parseInt(this.ribbonDiv.scrollLeft) / parseInt(this.babbleWidth)) + 1;\n    }\n\n\n    setBabbleStyleActive(bubbleNumber) {\n        this.ActiveBubble = bubbleNumber;\n        let bubble = this.questionsStatus[bubbleNumber].questionStatusElement;\n        bubble.classList.add('current-quest-status');\n    }\n\n    setBabbleStyleNotActive(bubbleNumber) {\n        let bubble = this.questionsStatus[bubbleNumber].questionStatusElement;\n        bubble.classList.remove('current-quest-status');\n    }\n\n    setBabbleStyleBlocked(bubbleNumber) {\n        let bubble = this.questionsStatus[bubbleNumber].questionStatusElement;\n        bubble.classList.add('blocked');\n    }\n\n    moveScrollIfCurrentBubbleIsLast(nextBubble) {\n        const lastBubbleInVision = this.getLastBubbleInVision();\n        const firstBubbleInVision = this.getFirstBubbleInVision();\n        if (nextBubble < firstBubbleInVision) {\n            let pixelsToMove = nextBubble * this.babbleWidth - this.moveAmount;\n            this.ribbonDiv.scrollTo(pixelsToMove, 0);\n            return true;\n        }\n        if (nextBubble >= lastBubbleInVision) {\n            let pixelsToMove = nextBubble * this.babbleWidth - this.moveAmount;\n            this.ribbonDiv.scrollTo(pixelsToMove, 0);\n        }\n\n    }\n\n}\n\n\n//# sourceURL=webpack://cpsportal/./resources/js/cps_test/ribbon.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/cps_test/app.js");
/******/ 	
/******/ })()
;