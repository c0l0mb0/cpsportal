/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/cps_test/app.js":
/*!**************************************!*\
  !*** ./resources/js/cps_test/app.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _exam__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exam */ \"./resources/js/cps_test/exam.js\");\n\n\nlet pageContent = document.querySelector('#page-content');\nlet exam = new _exam__WEBPACK_IMPORTED_MODULE_0__[\"default\"](pageContent);\n\n\n//# sourceURL=webpack://cpsportal/./resources/js/cps_test/app.js?");

/***/ }),

/***/ "./resources/js/cps_test/dao.js":
/*!**************************************!*\
  !*** ./resources/js/cps_test/dao.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"config\": () => (/* binding */ config),\n/* harmony export */   \"downloadFile\": () => (/* binding */ downloadFile),\n/* harmony export */   \"httpRequest\": () => (/* binding */ httpRequest)\n/* harmony export */ });\nlet url = window.location\nlet splitUrl = url.toString().split('/');\nsplitUrl = splitUrl.slice(0, -1);\nlet UrlPathWithoutLastDirectory = splitUrl.join(\"/\")\n\nlet config = {\n    api: {\n        getElectroBezTable: '/api/electro_bez_table',\n        getSpsExamTable: '/api/sps_exam_table',\n        postLogOut: '/logout',\n        loginURL: '/login',\n    }\n};\n\nObject.keys(config.api).forEach(key => {\n    config.api[key] = UrlPathWithoutLastDirectory + config.api[key];\n});\n\nfunction httpRequest(url, method, data = null, idRow = null) {\n    if (idRow !== null) url += '/' + idRow;\n\n    return new Promise(function (resolve, reject) {\n        let oReq = new XMLHttpRequest();\n        // oReq.responseType = 'json'; ie11 compatibility\n        oReq.open(method, url, true);\n        oReq.responseType = \"json\";\n        oReq.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        oReq.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n\n        oReq.onload = function () {\n            if (oReq.status >= 200 && oReq.status < 300) {\n                let res = JSON.stringify(oReq.response);\n                res = JSON.parse(res);\n                resolve(res);\n            } else {\n                reject({\n                    status: oReq.status,\n                    statusText: oReq.statusText\n                });\n            }\n        };\n        oReq.onerror = function () {\n            reject({\n                status: oReq.status,\n                statusText: oReq.statusText\n            });\n        };\n        oReq.send(JSON.stringify(data));\n    });\n}\n\nfunction downloadFile(url, method, data = null) {\n    let oReq = new XMLHttpRequest();\n    oReq.open(method, url, true);\n    oReq.responseType = \"blob\";\n    oReq.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    oReq.setRequestHeader('Content-type', 'application/json; charset=utf-8');\n    oReq.onload = function (event) {\n        let blob = oReq.response;\n        let filename = '';\n        let disposition = oReq.getResponseHeader('Content-Disposition');\n        if (disposition && disposition.indexOf('attachment') !== -1) {\n            let filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n            let matches = filenameRegex.exec(disposition);\n            if (matches != null && matches[1]) {\n                filename = matches[1].replace(/['\"]/g, '');\n            }\n        }\n\n        let link = document.createElement('a');\n        link.href = window.URL.createObjectURL(blob);\n        link.download = decodeURI(filename);\n        link.click();\n        link.remove();\n        URL.revokeObjectURL(url);\n    };\n    oReq.onerror = function (event) {\n        console.log(event);\n    };\n\n    oReq.send(JSON.stringify(data));\n}\n\n\n\n\n//# sourceURL=webpack://cpsportal/./resources/js/cps_test/dao.js?");

/***/ }),

/***/ "./resources/js/cps_test/exam.js":
/*!***************************************!*\
  !*** ./resources/js/cps_test/exam.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Exam)\n/* harmony export */ });\n/* harmony import */ var _dao__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dao */ \"./resources/js/cps_test/dao.js\");\n/* harmony import */ var _ribbon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ribbon */ \"./resources/js/cps_test/ribbon.js\");\n\n\n\nclass Exam {\n    idPageContent;\n    examHtml;\n    themes = [];\n    questionsForTestForm = [];\n    questionsDB = [];\n    ribbon;\n    rightAnswerNumber = 0\n    currentQuestionInArray = 0;\n    optionsElectroBezHtml;\n    examTypeAndModeHtml;\n    examType;\n    exaMode;\n\n    constructor(idPageContent) {\n        this.idPageContent = idPageContent;\n        this.assignHtml();\n        this.createExamTypeAndModeForm();\n    }\n\n    createExamTypeAndModeForm() {\n        this.idPageContent.innerHTML = this.examTypeAndModeHtml;\n        document.querySelector('.btn-chose-exam_type_and_mode').onclick = () => {\n            this.exaMode = document.querySelector('#test_options_mode').value;\n            this.examType = document.querySelector('#test_options_type').value;\n            if (this.examType === 'electroBez') {\n                (0,_dao__WEBPACK_IMPORTED_MODULE_0__.httpRequest)(_dao__WEBPACK_IMPORTED_MODULE_0__.config.api.getElectroBezTable, 'GET').then((electroBezTableResponse) => {\n                    this.createElectroBezPrepForm();\n                    this.createElectroBezQuestionsStructure(electroBezTableResponse);\n                }).catch((e) => {\n                    console.log(e);\n                });\n                return;\n            }\n            if (this.examType === 'ops' && this.exaMode === 'preparation') {\n                (0,_dao__WEBPACK_IMPORTED_MODULE_0__.httpRequest)(_dao__WEBPACK_IMPORTED_MODULE_0__.config.api.getSpsExamTable, 'GET').then((spsExamTableResponse) => {\n                    this.createSpsQuestionsStructure(spsExamTableResponse);\n                    this.createExamForm();\n                }).catch((e) => {\n                    console.log(e);\n                });\n                return;\n            }\n            if (this.examType === 'ops' && this.exaMode === 'exam') {\n\n            }\n        }\n    }\n\n    createExamForm() {\n        this.setFormWide();\n        this.createExamPageStructure(this.questionsForTestForm.length);\n        //assignAnswerButtonAction\n        document.querySelector('.btn-submit-answer').addEventListener(\"click\", this.checkAnswer.bind(this));\n        // //insertFirstQuestion\n        this.createQuestionAndAnswers(this.currentQuestionInArray);\n        this.ribbon.setBabbleStyleActive(this.currentQuestionInArray);\n    }\n\n    setFormWide() {\n        let formContainer = document.querySelector('.form-container');\n        formContainer.style.maxWidth = '95%';\n    }\n\n    createElectroBezPrepForm() {\n        this.idPageContent.innerHTML = this.optionsElectroBezHtml;\n\n        document.querySelector('.btn-start-test').onclick = () => {\n\n            let examSelectedOptions = {\n                group: undefined,\n                mode: undefined,\n                voltage: undefined,\n                theme: undefined,\n            }\n            examSelectedOptions.voltage = document.querySelector('#test-options_electrical-voltage').value;\n            examSelectedOptions.group = document.querySelector('#test-options_electrical-group').value;\n            examSelectedOptions.theme = parseInt(document.querySelector('#test-themes').value);\n            this.filterQuestions(examSelectedOptions);\n            this.setFormWide();\n            this.createExamForm();\n        }\n\n    }\n\n    checkAnswer() {\n        const answersRadioButtons = document.querySelectorAll(\".form-check-input\");\n        let userAnswer = undefined;\n        for (let i = 0; i < answersRadioButtons.length; i++) {\n            if (answersRadioButtons[i].checked) {\n                userAnswer = parseInt(answersRadioButtons[i].dataset.ans_numb);\n                break;\n            }\n        }\n        if (userAnswer === undefined) {\n            return false;\n        }\n        if (userAnswer === this.rightAnswerNumber) {\n            this.rightAnswerAction();\n            return false;\n        }\n        this.wrongAnswerAction(userAnswer);\n    }\n\n    filterQuestions(examSelectedOptions) {\n        let groupFieldToFilter = '';\n\n        switch (examSelectedOptions.group) {\n            case '2':\n                groupFieldToFilter = 'secondGroup';\n                break;\n            case '3':\n                groupFieldToFilter = 'thirdGroup';\n                break;\n            case '4':\n                groupFieldToFilter = 'fourthGroup';\n                break;\n            case '5':\n                groupFieldToFilter = 'fifthGroup';\n                break;\n        }\n\n        this.questionsForTestForm = this.questionsDB.filter((question) => {\n            if (examSelectedOptions.theme === 0) {\n                if (question[groupFieldToFilter] === true && question[examSelectedOptions.voltage] === true) {\n                    return true\n                }\n            }\n            if (question[groupFieldToFilter] === true && question[examSelectedOptions.voltage] === true &&\n                question.theme === examSelectedOptions.theme) {\n                return true\n            }\n        });\n    }\n\n    createQuestionAndAnswers(questionNumberInArray) {\n        const questionDiv = document.querySelector('.question');\n        let bookLink = '';\n        if (this.questionsForTestForm[questionNumberInArray].bookLink !== null) {\n            bookLink = this.questionsForTestForm[questionNumberInArray].bookLink;\n        }\n        questionDiv.textContent = this.questionsForTestForm[questionNumberInArray].questionText + ' ' + bookLink;\n        //image\n        let image = document.querySelector('#image_question');\n        if (this.questionsForTestForm[questionNumberInArray].pictName !== '' &&\n            this.questionsForTestForm[questionNumberInArray].pictName !== null) {\n            image.src = 'http://cpsportal/public/pict/sps_test/' + this.questionsForTestForm[questionNumberInArray].pictName;\n            image.hidden = false;\n        } else {\n            image.hidden = true;\n        };\n\n        //answers\n        const answersDiv = document.querySelector('.answers');\n        let rightAnswerNumber = 0;\n        answersDiv.innerHTML = '';\n        for (let i = 0; i < this.questionsForTestForm[questionNumberInArray].answers.length; i++) {\n            let currentAnswerHtml = this.createHtmlAnswer(i, this.questionsForTestForm[questionNumberInArray].answers[i]['text']);\n            if (this.questionsForTestForm[questionNumberInArray].answers[i]['correct']) {\n                this.rightAnswerNumber = i;\n            }\n            answersDiv.innerHTML += currentAnswerHtml;\n        }\n        return false\n    }\n\n    rightAnswerAction() {\n        this.ribbon.setBubbleBackgroundColor(true, this.currentQuestionInArray);\n        this.ribbon.setBabbleStyleNotActive(this.currentQuestionInArray);\n        if (this.questionsForTestForm.length >= this.currentQuestionInArray + 2) {\n            this.currentQuestionInArray++;\n            this.ribbon.moveScrollIfCurrentBubbleIsLast(this.currentQuestionInArray);\n            this.createQuestionAndAnswers(this.currentQuestionInArray);\n            this.ribbon.setBabbleStyleActive(this.currentQuestionInArray);\n        }\n\n\n    }\n\n    wrongAnswerAction(selectedAnswerNumber) {\n        const rightAnswerDiv = document.querySelector('.text_answer_' + this.rightAnswerNumber);\n        rightAnswerDiv.style.backgroundColor = '#8bffd6';\n        if (selectedAnswerNumber !== undefined) {\n            const userAnswerDiv = document.querySelector('.text_answer_' + selectedAnswerNumber);\n            userAnswerDiv.style.backgroundColor = '#fec6c6';\n        }\n        this.ribbon.setBubbleBackgroundColor(false, this.currentQuestionInArray);\n    }\n\n    createSpsQuestionsStructure(examResponse) {\n        examResponse.forEach((elem) => {\n            let question = {\n                bookLink: null,\n                questionText: elem.question,\n                pictName: elem.pict_path,\n                answers: [],\n                isMedicine: false,\n            }\n            for (let i = 1; i <= 5; i++) {\n                let currentAnswerNumbField = 'answer_' + i.toString();\n                if (elem[currentAnswerNumbField] !== null && elem[currentAnswerNumbField] !== '') {\n                    let answer = {\n                        text: elem[currentAnswerNumbField],\n                        correct: undefined,\n                    }\n                    question.answers.push(answer);\n                }\n            }\n            if (elem.correct_answer === null) {\n                throw new Error('correct_answer === null');\n            }\n            let correctAnswer = parseInt(elem.correct_answer);\n            question.answers[correctAnswer - 1].correct = true;\n\n            // console.log(question.answers[correctAnswer]);\n\n            this.questionsForTestForm.push(question);\n        });\n        // console.log(this.questions);\n    }\n\n    createElectroBezQuestionsStructure(examResponse) {\n        examResponse.forEach((elem) => {\n            if (elem.question_theme_correct === 'Theme') {\n                this.themes.push(elem.theme_question_answer);\n                let themesOption = document.querySelector('#test-themes');\n                themesOption.add(new Option(elem.theme_question_answer, elem.theme));\n            }\n            if (elem.question_theme_correct === 'Question') {\n                let question = {\n                    theme: elem.theme,\n                    till1000: elem.till_1000,\n                    tillAbove1000: elem.till_above_1000,\n                    secondGroup: elem.second_group,\n                    thirdGroup: elem.third_group,\n                    fourthGroup: elem.fourth_group,\n                    fifthGroup: elem.fifth_group,\n                    commissionMember: elem.commission_member,\n                    employee: elem.employee,\n                    bookLink: elem.book_link,\n                    questionText: elem.theme_question_answer,\n                    answers: [],\n                    pictName: '',\n                }\n                this.questionsDB.push(question);\n            }\n            if (elem.question_theme_correct === 'False' || elem.question_theme_correct === 'True') {\n                let lastQuestion = this.questionsDB[this.questionsDB.length - 1];\n                let answer = {\n                    text: elem.theme_question_answer,\n                    correct: undefined,\n                }\n                elem.question_theme_correct === 'False' ? answer.correct = false : answer.correct = true;\n                this.questionsDB[this.questionsDB.length - 1].answers.push(answer)\n            }\n        })\n    }\n\n    createExamPageStructure(questionsLength) {\n        this.idPageContent.innerHTML = this.examHtml;\n        this.ribbon = new _ribbon__WEBPACK_IMPORTED_MODULE_1__[\"default\"](document.querySelector('.questions-ribbon'), questionsLength - 1, this);\n    }\n\n\n    createHtmlAnswer(answerNumber, answerText) {\n        return `\n            <div class=\"form-check d-flex\">\n            <div class=\"radio-button-wrapper d-flex justify-content-md-center align-items-center\">\n                <input class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" data-ans_numb=\"${answerNumber}\"\n                 id=\"answer_${answerNumber}\">\n            </div>\n            <div class=\"quest-text\">\n                <label class=\"form-check-answer text_answer_${answerNumber}\" for=\"answer_${answerNumber}\">\n                    ${answerText}\n                </label>\n            </div>\n            </div>\n            <div class=\"vertical-space\"></div>\n        `\n    }\n\n    assignHtml() {\n        this.examTypeAndModeHtml = `\n                    <div class=\"row mb-3\">\n                        <label for=\"test-options_mode\" class=\"col-sm-2 col-form-label\">Режим</label>\n                        <div class=\"col-sm-10\">\n                            <select class=\"form-control\" id=\"test_options_mode\">\n                                <option value=\"preparation\" selected>Подготовка</option>\n                                <option value=\"exam\">Экзамен</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <label for=\"test-options_type\" class=\"col-sm-2 col-form-label\">Тема</label>\n                        <div class=\"col-sm-10\">\n                            <select class=\"form-control\" id=\"test_options_type\">\n                                <option value=\"electroBez\" selected>Электробезопасность</option>\n                                <option value=\"ops\">Нормы ОПС</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"d-flex flex-row-reverse bd-highlight\">\n                        <button type=\"submit\" class=\"btn btn-primary btn-chose-exam_type_and_mode\">Далее</button>\n                    </div>\n        `\n        this.optionsElectroBezHtml = `\n\n                    <div class=\"row mb-3\" hidden>\n                        <label for=\"test-options_quest-amount\" class=\"col-sm-2 col-form-label\">Количество вопросов</label>\n                        <div class=\"col-sm-10\">\n                            <select class=\"form-control\" id=\"test-options_mode\">\n                                <option value=\"10\" selected>10</option>\n                                <option value=\"20\">20</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <label for=\"test-options_electrical-voltage\" class=\"col-sm-2 col-form-label\">Напряжение</label>\n                        <div class=\"col-sm-10\">\n                            <select class=\"form-control\" id=\"test-options_electrical-voltage\">\n                                <option value=\"till1000\" selected>до 1000В</option>\n                                <option value=\"tillAbove1000\">до и выше 1000В</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <label for=\"test-options_electrical-group\" class=\"col-sm-2 col-form-label\">Группа</label>\n                        <div class=\"col-sm-10\">\n                            <select class=\"form-control\" id=\"test-options_electrical-group\">\n                                <option value=\"2\">2</option>\n                                <option value=\"3\" selected>3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"4\">5</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <label for=\"test-themes\" class=\"col-sm-2 col-form-label\">Темы</label>\n                        <div class=\"col-sm-10\">\n                            <select class=\"form-control\" id=\"test-themes\">\n                                <option value=\"0\" selected>Все темы</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"d-flex flex-row-reverse bd-highlight\">\n                        <button type=\"submit\" class=\"btn btn-primary btn-start-test\">Далее</button>\n                    </div>\n        `\n\n        this.examHtml = `\n                    <div class=\"questions-ribbon d-flex flex-row\"></div>\n                    <div class=\"question text-center\"></div>\n                    <div class=\"question image_question_wrapper\" style=\"display: flex;justify-content: center;\">\n                        <img src=\"\" alt=\"question image\" id ='image_question' width=\"400\" height=\"400\">\n                    </div>\n                    <div class=\"answers\"></div>\n                    <div class=\"d-grid gap-2 col-3 mx-auto\">\n                        <button type=\"submit\" class=\"btn btn-primary btn-submit-answer\">Ответить</button>\n                    </div>\n        `\n    }\n}\n\n\n//# sourceURL=webpack://cpsportal/./resources/js/cps_test/exam.js?");

/***/ }),

/***/ "./resources/js/cps_test/ribbon.js":
/*!*****************************************!*\
  !*** ./resources/js/cps_test/ribbon.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ribbon)\n/* harmony export */ });\nclass Ribbon {\n    ActiveBubble = 0\n    ribbonDiv;\n    questionsStatus = [];\n    exam;\n    babbleWidth;\n    inScreenBubbles;\n    moveAmount;\n\n    constructor(ribbonDiv, bubblesQuantity, exam) {\n        this.ribbonDiv = ribbonDiv;\n        this.bubblesQuantity = bubblesQuantity;\n        this.exam = exam;\n        this.fillRibbonWithBubbles(bubblesQuantity);\n        this.calculateBubbleWidth();\n        this.calculateMoveScrollStep();\n\n    }\n\n    fillRibbonWithBubbles(bubblesQuantity) {\n        for (let i = 0; i <= bubblesQuantity; i++) {\n            const questionStatusElement = document.createElement(\"div\");\n            questionStatusElement.classList.add('quest-status', 'text-center', 'bubble-' + i);\n            questionStatusElement.textContent = (i + 1).toString();\n            this.ribbonDiv.appendChild(questionStatusElement);\n            let questionStatus = {\n                questionStatusElement: undefined,\n                userResult: undefined\n            }\n            questionStatus.questionStatusElement = questionStatusElement;\n            this.questionsStatus.push(questionStatus);\n            questionStatusElement.addEventListener(\"click\", () => {\n                this.setBabbleStyleNotActive(this.exam.currentQuestionInArray);\n                this.exam.currentQuestionInArray = i;\n                this.setBabbleStyleActive(this.exam.currentQuestionInArray);\n                this.exam.createQuestionAndAnswers(i)\n            });\n        }\n    }\n\n\n    calculateBubbleWidth() {\n        const bubble0 = document.querySelector('.bubble-0');\n        const style = getComputedStyle(bubble0);\n        const bubble0LeftMargin = style.marginLeft;\n        this.babbleWidth = bubble0.offsetWidth + parseInt(bubble0LeftMargin);\n        this.inScreenBubbles = Math.floor(this.ribbonDiv.clientWidth / this.babbleWidth);\n    }\n\n    setBubbleBackgroundColor(isRight, currentQuestionInArray) {\n        let bubble = this.questionsStatus[currentQuestionInArray];\n        if (bubble.userResult === undefined && isRight) {\n            bubble.questionStatusElement.style.backgroundColor = '#8bffd6';\n            bubble.userResult = 'right';\n        }\n        if (bubble.userResult === undefined && !isRight) {\n            bubble.questionStatusElement.style.backgroundColor = '#fec6c6';\n            bubble.userResult = 'wrong';\n        }\n    }\n\n    calculateMoveScrollStep() {\n        this.moveAmount = Math.floor(this.ribbonDiv.clientWidth / 2.5);\n    }\n\n    getLastBubbleInVision() {\n        if (this.ribbonDiv.scrollLeft !== 0) {\n            let bubblesNotInVisionOnLeftSide = Math.floor(parseInt(this.ribbonDiv.scrollLeft) / parseInt(this.babbleWidth));\n            return bubblesNotInVisionOnLeftSide + this.inScreenBubbles;\n        }\n        return this.inScreenBubbles;\n    }\n\n    getFirstBubbleInVision() {\n        if (this.ribbonDiv.scrollLeft === 0) {\n            return 1;\n        }\n        return Math.floor(parseInt(this.ribbonDiv.scrollLeft) / parseInt(this.babbleWidth)) + 1;\n    }\n\n\n    setBabbleStyleActive(bubbleNumber) {\n        this.ActiveBubble = bubbleNumber;\n        let bubble = this.questionsStatus[bubbleNumber].questionStatusElement;\n        bubble.classList.add('current-quest-status')\n    }\n\n    setBabbleStyleNotActive(bubbleNumber) {\n        let bubble = this.questionsStatus[bubbleNumber].questionStatusElement;\n        bubble.classList.remove('current-quest-status')\n    }\n\n    moveScrollIfCurrentBubbleIsLast(nextBubble) {\n        const lastBubbleInVision = this.getLastBubbleInVision();\n        const firstBubbleInVision = this.getFirstBubbleInVision();\n        if (nextBubble < firstBubbleInVision) {\n            let pixelsToMove = nextBubble * this.babbleWidth - this.moveAmount;\n            this.ribbonDiv.scrollTo(pixelsToMove, 0);\n            return true;\n        }\n        if (nextBubble >= lastBubbleInVision) {\n            //\n            // console.log('nextBubble')\n            // console.log(nextBubble)\n            // console.log('lastBubbleInVision')\n            // console.log(lastBubbleInVision)\n            let pixelsToMove =nextBubble * this.babbleWidth - this.moveAmount;\n            this.ribbonDiv.scrollTo(pixelsToMove, 0);\n        }\n\n    }\n\n}\n\n\n//# sourceURL=webpack://cpsportal/./resources/js/cps_test/ribbon.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/cps_test/app.js");
/******/ 	
/******/ })()
;